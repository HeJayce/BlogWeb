<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>hexo_install</title>
      <link href="//post/hexo-install.html"/>
      <url>//post/hexo-install.html</url>
      
        <content type="html"><![CDATA[<p>使用hexo框架搭建个人博客已有2个多月，是时候写一篇部署步骤以及踩坑总结了<br>为什么使用hexo</p><h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><p>hexo可以直接通过npm进行安装，windows同理</p><pre class="line-numbers language-none"><code class="language-none">npm install -g hexo-cli</code></pre><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/image-20220427224941463.png" alt="image-20220427224941463"></p><p>出现此报错命令前加sudo</p><p>安装成功后，可以直接新建一个项目</p><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/image-20220427225043033.png" alt="image-20220427225043033"></p><p>新建一个项目，并初始化，其中名字自定义    </p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">hexo init blog_name</code></pre><p>此时hexo会从github将框架拉到本地的项目名称文件夹下</p><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/image-20220427225351741.png" alt="image-20220427225351741"></p><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/image-20220427225423970.png" alt="image-20220427225423970"></p><p>使用ide打开，我使用的是webstorm，根据个人喜好即可</p><p>打开项目后，使用``npm install` 将package.json 中的包下载下来</p><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/image-20220427225734227.png" alt="image-20220427225734227"></p><p>此时这个最简单的项目基本框架就算有了，生成一下静态文件，用浏览器看看吧</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">hexo generate  #生成静态文件   简写hexo ghexo server    #启动服务器    简写hexo s</code></pre><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/image-20220427230214814.png" alt="image-20220427230214814"></p><p>打开<a href="http://localhost:4000/">http://localhost:4000/</a></p><p>即可进入欢迎界面：</p><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/image-20220427230335376.png" alt="image-20220427230335376"></p><p>接着我们在github上新建一个仓库，仓库的名字必须是<code>用户名.github.io</code>格式，比如<img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/image-20220427231524340.png" alt="image-20220427231524340"></p><p>将静态网页部署在此仓库即可通过上面的域名进行访问。如果觉得github的网络不好也可以使用国内的gitee，操作方法一致。</p><h2 id="模板选择"><a href="#模板选择" class="headerlink" title="模板选择"></a>模板选择</h2><p>在github中有许多开源的模板（主题）可供大家选择，大家也可自行百度，选择自己喜欢的模板。我选择的是<a href="https://github.com/blinkfox/hexo-theme-matery">mater模板</a>，不同的模板有不同的配置，选择的时候需要仔细阅读开发者提供的使用说明</p><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/image-20220427230711782.png" alt="image-20220427230711782"></p><p>将喜欢的模板下载下来后，放入themes 文件夹下，直接将整个文件夹放入就好</p><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/image-20220427231227399.png" alt="image-20220427231227399"></p><p>接着在<code>_config.yml</code>中找到theme ，将theme的参数改为模板名称，注意模板名称为文件夹名称，改完后重新生成文件并启动服务：</p><pre class="line-numbers language-none"><code class="language-none">hexo clhexo ghexo s</code></pre><p>打开</p><h2 id="关于markdown"><a href="#关于markdown" class="headerlink" title="关于markdown"></a>关于markdown</h2><h2 id="服务器部署"><a href="#服务器部署" class="headerlink" title="服务器部署"></a>服务器部署</h2><p>由于是静态网页，服务器部署起来非常简单，如果自己有服务器可以进行服务器部署，后续可增加可玩性。</p><p>静态网页通过nginx即可完成，没有nginx的通过yum安装即可</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">yum install epel-releaseyum install -y nginx</code></pre><p>将github上发布的代码克隆到服务器即可</p><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/markdown/202204281451049.png" alt="image-20220428145145675"></p><p>在nginx配置文件中修改成下面的配置，root填写项目文件夹地址</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx">server {        listen       80;        server_name  localhost;        location / {            root  /root/HeJayce.github.io;            index index.html;        }}</code></pre><p>改好别忘了重载nginx配置</p><p>这时打开浏览器访问IP:80 或域名就会打开index.html，即你的主页</p><h2 id="https"><a href="#https" class="headerlink" title="https"></a>https</h2><p>设置https可以到阿里云申请免费的证书，每人有20个额度</p><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/markdown/202204261132101.png" alt="image-20220426113211531"></p><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/markdown/202204261133715.png" alt="image-20220426113304547"></p><p>购买完成后，进入ssl证书管理台，选择免费证书</p><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/markdown/202204261134061.png" alt="image-20220426113400984"></p><p>点击创建证书，会在列表里新建一个待申请证书，点击右边证书申请，填写你的域名以及信息，CSR选择系统生成</p><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/markdown/202204261137893.png" alt="image-20220426113751817"></p><p>注意你的域名需要添加到DNS解析当中</p><p>创建好证书后，将申请好的证书下载下来，使用nginx代理就选择nginx证书</p><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/image-20220427223638482.png" alt="image-20220427223638482"></p><p>下载下来后是两个文件</p><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/image-20220427223736666.png" alt="image-20220427223736666"></p><p>进入服务器，打开nginx的配置，添加以下内容：</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx">server {        listen       443 ssl;        server_name  jayce.icu;        # ssl证书地址        ssl_certificate     /usr/local/nginx/cert/jayce.pem;  # pem文件的路径        ssl_certificate_key  /usr/local/nginx/cert/jayce.key; # key文件的路径        # ssl验证相关配置        ssl_session_timeout  5m;    #缓存有效期        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;    #加密算法        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;    #安全链接可选的加密协议        ssl_prefer_server_ciphers on;   #使用服务器端的首选算法        location / {            root /var/lib/jenkins/workspace/jayce_blog;            index index.html;        }}</code></pre><p>其中将刚才下载的两个文件放入服务器，将配置文件中两个文件的路径改为实际路径，注意pem和key文件的位置</p><p>server_name 填写你申请证书的地址</p><p>ssl相关配置可以不用管，复制即可</p><p>重载nginx，过几分钟后验证即可</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">nginx -s reload</code></pre><p>强制http转https:</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">server {    listen 80;    server_name  jayce.icu  www.jayce.icu;    return 301 https://jayce.icu$request_uri;}</code></pre><h2 id="个性化改装"><a href="#个性化改装" class="headerlink" title="个性化改装"></a>个性化改装</h2><h2 id="代码部署同步"><a href="#代码部署同步" class="headerlink" title="代码部署同步"></a>代码部署同步</h2><p>使用jenkins实现服务器与github代码同步，本地部署到github后，服务器会自动拉取最新的代码</p><p><a href="https://jayce.icu/post/jenkins-github.html">在服务器部署Jenkins同步github代码 | Jayce’s Blog</a></p><h2 id="git-分支"><a href="#git-分支" class="headerlink" title="git 分支"></a>git 分支</h2><p>需要多个版本的需求</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>grafana_not_allow</title>
      <link href="//post/grafana-not-allow.html"/>
      <url>//post/grafana-not-allow.html</url>
      
        <content type="html"><![CDATA[<p>grafana 出现</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>服务器简单的监控脚本</title>
      <link href="//post/watchdog.html"/>
      <url>//post/watchdog.html</url>
      
        <content type="html"><![CDATA[<h2 id="服务器简单的监控脚本监控docker等进程"><a href="#服务器简单的监控脚本监控docker等进程" class="headerlink" title="服务器简单的监控脚本监控docker等进程"></a>服务器简单的监控脚本监控docker等进程</h2><p>脚本实现监控docker 运行的各个服务和其他重要程序，当某项服务挂了，可发邮件给管理者，并自动重启</p><h2 id="自动发送邮件"><a href="#自动发送邮件" class="headerlink" title="自动发送邮件"></a>自动发送邮件</h2><p>安装maix</p><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/markdown/202204081115382.png" alt="image-20220408111516967"></p><p>关闭默认邮件服务器（centos7）</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">systemctl stop postfixsystemctl stop sendmail</code></pre><p>编辑配置文件  <code>/etc/mail.rc</code>，添加下面内容</p><pre class="line-numbers language-none"><code class="language-none">set from=notice@jayce.icuset smtp=smtps://smtp.exmail.qq.com:465set smtp-auth-user=notice@jayce.icuset smtp-auth-password=*******set smtp-auth=loginset ssl-verify=ignoreset nss-config-dir=/etc/pki/nssdb</code></pre><p>set from  发送邮件的邮箱<br>set smtp  邮箱的stmp服务器地址<br>set smtp-auth-user   登录名<br>set smtp-auth-password  登录名<br>set smtp-auth=login  登录验证<br>set ssl-verify=ignore  忽略ssl证书 <em>重要</em><br>set nss-config-dir=/etc/pki/nssdb  ssl证书目录</p><p>具体的邮箱服务器地址，端口，登录密码等以实际邮箱情况为准，有些密码需要授权</p><p>阿里云服务器为了防止垃圾短信，默认关闭25号端口，需要在安全组规则开通465端口</p><p>配置成功后测试一下：</p><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/markdown/202204081327730.png" alt="image-20220408132759402"></p><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/markdown/202204081328786.png" alt="image-20220408132818714"></p><h2 id="监控docker服务"><a href="#监控docker服务" class="headerlink" title="监控docker服务"></a>监控docker服务</h2><p>获取docker的状态</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">docker ps -a</code></pre><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/markdown/202204081334165.png" alt="image-20220408133446902"></p><p>从status可知具体的状态，从此可进行判断进程状态，先来一个判断是否exit的</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">docker ps -a |grep Exited</code></pre><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/markdown/202204081336789.png" alt="image-20220408133617687"></p><p>当此命令有返回时，即有服务退出了，利用此特性，可以将退出的进程发送邮件给管理者</p><p>取出状态为Exited的服务名：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker_images_status_exited=$(docker ps -a | grep Exited | awk '{print $NF}')</code></pre><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/markdown/202204081340268.png" alt="image-20220408134055200"></p><p>发送邮件：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">if [ "$docker_images_status_exited" ]; then  echo  $(date +%Y-%m-%-d-%H:%M:%S) $docker_images_status_exited $status &gt;&gt; /root/logs/docker.log  echo  $(date +%Y-%m-%-d-%H:%M:%S) $docker_images_status_exited $status | mailx -s "docker 异常" he@jayce.icu 2&gt;&gt; /dev/nullfi</code></pre><p>如果需要自动启动，将  <code>docker start $docker_images_status_exited</code>放入<code>if</code>中即可</p><p>实际运行：</p><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/markdown/202204081344811.png" alt="image-20220408134442666"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
            <tag> Linux </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KeepAlive详解</title>
      <link href="//post/keepalive.html"/>
      <url>//post/keepalive.html</url>
      
        <content type="html"><![CDATA[<h1 id="KeepAlive详解"><a href="#KeepAlive详解" class="headerlink" title="KeepAlive详解"></a>KeepAlive详解</h1><p>转载地址：<a href="https://www.jianshu.com/p/9fe2c140fa52">KeepAlive详解 - 简书 (jianshu.com)</a> 实际作者不详</p><p>首先，我们要明确我们谈的是<strong>TCP</strong>的 <strong><code>KeepAlive</code></strong> 还是<strong>HTTP</strong>的 <strong><code>Keep-Alive</code><strong>。TCP的KeepAlive和HTTP的Keep-Alive</strong>是完全不同的概念，不能混为一谈</strong>。实际上HTTP的KeepAlive写法是<code>Keep-Alive</code>，跟TCP的<code>KeepAlive</code>写法上也有不同。</p><ul><li>TCP的<strong>keepalive</strong>是侧重在保持客户端和服务端的连接，一方会不定期发送心跳包给另一方，当一方端掉的时候，没有断掉的定时发送几次<strong>心跳包</strong>，如果间隔发送几次，对方都返回的是RST，而不是ACK，那么就释放当前链接。设想一下，如果tcp层没有keepalive的机制，一旦一方断开连接却没有发送FIN给另外一方的话，那么另外一方会一直以为这个连接还是存活的，几天，几月。那么这对服务器资源的影响是很大的。</li><li>HTTP的<strong>keep-alive</strong>一般我们都会带上中间的<strong>横杠</strong>，普通的http连接是客户端连接上服务端，然后结束请求后，由客户端或者服务端进行http连接的关闭。下次再发送请求的时候，客户端再发起一个连接，传送数据，关闭连接。这么个流程反复。但是一旦客户端发送connection:keep-alive头给服务端，且服务端也接受这个keep-alive的话，两边对上暗号，这个连接就可以复用了，一个http处理完之后，另外一个http数据直接从这个连接走了。减少新建和断开TCP连接的消耗。</li></ul><p>二者的作用简单来说：</p><blockquote><p>HTTP协议的Keep-Alive意图在于短时间内连接复用，希望可以短时间内在同一个连接上进行多次请求/响应。</p><p>TCP的KeepAlive机制意图在于保活、心跳，检测连接错误。当一个TCP连接两端长时间没有数据传输时(通常默认配置是2小时)，发送keepalive探针，探测链接是否存活。</p></blockquote><p><strong>总之，记住HTTP的Keep-Alive和TCP的KeepAlive不是一回事。</strong></p><p>tcp的keepalive是在ESTABLISH状态的时候，双方如何检测连接的可用行。而http的keep-alive说的是如何避免进行重复的TCP三次握手和四次挥手的环节。</p><hr><h3 id="TCP的KeepAlive"><a href="#TCP的KeepAlive" class="headerlink" title="TCP的KeepAlive"></a>TCP的KeepAlive</h3><h5 id="1-为什么要有KeepAlive？"><a href="#1-为什么要有KeepAlive？" class="headerlink" title="1.为什么要有KeepAlive？"></a>1.为什么要有KeepAlive？</h5><p>在谈KeepAlive之前，我们先来了解下简单TCP知识(知识很简单，高手直接忽略)。首先要明确的是<strong>在TCP层是没有“请求”一说的</strong>，经常听到在TCP层发送一个请求，这种说法是错误的。</p><p>TCP是一种通信的方式，<strong>“请求”一词是事务上的概念</strong>，HTTP协议是一种事务协议，如果说发送一个HTTP请求，这种说法就没有问题。也经常听到面试官反馈有些面试运维的同学，基本的TCP三次握手的概念不清楚，面试官问TCP是如何建立链接，面试者上来就说，假如我是客户端我发送一个请求给服务端，服务端发送一个请求给我。。。</p><p>这种一听就知道对TCP基本概念不清楚。下面是我通过wireshark抓取的一个TCP建立握手的过程。（命令行基本上用TCPdump,后面我们还会用这张图说明问题）:</p><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/markdown/202204071449977.webp" alt="img"></p><p>TCP抓包</p><p>现在我看只要看前3行，这就是TCP三次握手的完整建立过程，第一个报文SYN从发起方发出，第二个报文SYN,ACK是从被连接方发出，第三个报文ACK确认对方的SYN，ACK已经收到，如下图：</p><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/markdown/202204071449953.webp" alt="img"></p><p>TCP建立连接过程</p><p><strong>但是数据实际上并没有传输</strong>，请求是有数据的，<strong>第四个报文才是数据传输开始的过程</strong>，细心的读者应该能够发现wireshark把第四个报文解析成HTTP协议，HTTP协议的GET方法和URI也解析出来，所以说TCP层是没有请求的概念，HTTP协议是事务性协议才有请求的概念，TCP报文承载HTTP协议的请求(Request)和响应(Response)。</p><p>现在才是开始说明为什么要有KeepAlive。链接建立之后，如果应用程序或者上层协议一直不发送数据，或者隔很长时间才发送一次数据，当链接很久没有数据报文传输时如何去确定对方还在线，到底是掉线了还是确实没有数据传输，链接还需不需要保持，这种情况在TCP协议设计中是需要考虑到的。</p><p>TCP协议通过一种巧妙的方式去解决这个问题，当超过一段时间之后，TCP自动发送一个数据为空的报文给对方，如果对方回应了这个报文，说明对方还在线，链接可以继续保持，如果对方没有报文返回，并且重试了多次之后则认为链接丢失，没有必要保持链接。</p><h5 id="2-怎么开启KeepAlive？"><a href="#2-怎么开启KeepAlive？" class="headerlink" title="2.怎么开启KeepAlive？"></a>2.怎么开启KeepAlive？</h5><p>KeepAlive并不是默认开启的，在Linux系统上没有一个全局的选项去开启TCP的KeepAlive。需要开启KeepAlive的应用必须在TCP的socket中单独开启。Linux Kernel有三个选项影响到KeepAlive的行为：</p><blockquote><ul><li>tcp_keepalive_time 7200// 距离上次传送数据多少时间未收到新报文判断为开始检测，单位秒，默认7200s</li><li>tcp_keepalive_intvl 75// 检测开始每多少时间发送心跳包，单位秒，默认75s</li><li>tcp_keepalive_probes 9// 发送几次心跳包对方未响应则close连接，默认9次</li></ul></blockquote><p>TCP socket也有三个选项和内核对应，通过setsockopt系统调用针对单独的socket进行设置：</p><blockquote><ul><li>TCPKEEPCNT: 覆盖 tcpkeepaliveprobes</li><li>TCPKEEPIDLE: 覆盖 tcpkeepalivetime</li><li>TCPKEEPINTVL: 覆盖 tcpkeepalive_intvl</li></ul></blockquote><p>举个例子，以我的系统默认设置为例，kernel默认设置的tcpkeepalivetime是7200s, 如果我在应用程序中针对socket开启了KeepAlive,然后设置的TCP_KEEPIDLE为60，那么TCP协议栈在发现TCP链接空闲了60s没有数据传输的时候就会发送第一个探测报文。</p><h5 id="3-需要注意，KeepAlive的不足和局限性"><a href="#3-需要注意，KeepAlive的不足和局限性" class="headerlink" title="3. 需要注意，KeepAlive的不足和局限性"></a>3. 需要注意，KeepAlive的不足和局限性</h5><p>其实，tcp自带的keepalive还是有些不足之处的。</p><p><strong>keepalive只能检测连接是否存活，不能检测连接是否可用。</strong>例如，某一方发生了死锁，无法在连接上进行任何读写操作，但是操作系统仍然可以响应网络层keepalive包。</p><p>TCP keepalive 机制依赖于操作系统的实现,灵活性不够，默认关闭，且默认的 keepalive 心跳时间是 两个小时, 时间较长。</p><p>代理(如socks proxy)、或者负载均衡器，会让tcp keep-alive失效</p><p>基于此，我们旺旺需要加上应用层的心跳。这个需要自己实现，这里就不展开了。</p><hr><h3 id="HTTP的Keep-Alive"><a href="#HTTP的Keep-Alive" class="headerlink" title="HTTP的Keep-Alive"></a>HTTP的Keep-Alive</h3><h5 id="1-HTTP为什么需要Keep-Alive？"><a href="#1-HTTP为什么需要Keep-Alive？" class="headerlink" title="1. HTTP为什么需要Keep-Alive？"></a>1. HTTP为什么需要Keep-Alive？</h5><p>通常一个网页可能会有很多组成部分，除了文本内容，还会有诸如：js、css、图片等静态资源，有时还会异步发起AJAX请求。只有所有的资源都加载完毕后，我们看到网页完整的内容。然而，一个网页中，可能引入了几十个js、css文件，上百张图片，如果每请求一个资源，就创建一个连接，然后关闭，代价实在太大了。</p><p>基于此背景，我们希望连接能够在<strong>短时间内</strong>得到复用，在加载同一个网页中的内容时，尽量的复用连接，这就是HTTP协议中keep-alive属性的作用。</p><blockquote><ul><li>HTTP的Keep-Alive是<strong>HTTP1.1</strong>中<strong>默认开启</strong>的功能。通过headers设置”Connection: close “关闭</li><li>在HTTP1.0中是<strong>默认关闭</strong>的。通过headers设置”Connection: Keep-Alive”开启。</li></ul></blockquote><p>对于客户端来说，不论是浏览器，还是手机App，或者我们直接在Java代码中使用HttpUrlConnection，只是负责在请求头中设置Keep-Alive。Keep-Alive属性保持连接的<strong>时间长短是由服务端决定的</strong>，通常配置都是在<strong>几十秒左右。</strong></p><p>TCP连接建立之后，HTTP协议使用TCP传输HTTP协议的请求(Request)和响应(Response)数据，一次完整的HTTP事务如下图：</p><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/markdown/202204071449946.webp" alt="img"></p><p>HTTP请求</p><p>这张图我简化了HTTP(Req)和HTTP(Resp)，实际上的请求和响应需要多个TCP报文。<br>从图中可以发现一个完整的HTTP事务，有链接的建立，请求的发送，响应接收，断开链接这四个过程，早期通过HTTP协议传输的数据以文本为主，一个请求可能就把所有要返回的数据取到，但是，现在要展现一张完整的页面需要很多个请求才能完成，如图片.JS.CSS等，如果每一个HTTP请求都需要新建并断开一个TCP，这个开销是完全没有必要的。</p><p>开启HTTP Keep-Alive之后，能复用已有的TCP链接，当前一个请求已经响应完毕，服务器端没有立即关闭TCP链接，而是等待一段时间接收浏览器端可能发送过来的第二个请求，通常浏览器在第一个请求返回之后会立即发送第二个请求，如果某一时刻只能有一个链接，同一个TCP链接处理的请求越多，开启KeepAlive能节省的TCP建立和关闭的消耗就越多。</p><p>当然通常会启用多个链接去从服务器器上请求资源，但是开启了Keep-Alive之后，仍然能加快资源的加载速度。HTTP/1.1之后默认开启Keep-Alive, 在HTTP的头域中增加Connection选项。当设置为<code>Connection:keep-alive</code>表示开启，设置为<code>Connection:close</code>表示关闭。</p><p>如果tcp keepalive没有开启，那么开启http的keep-Alive是不是也没有用。 因为tcp连接都已经关闭了？</p><p>不是。TCP有一个保活计数器，当该时间段内没收到新数据，将自动断开连接，TCP keepalive就是为了刷新对方的保活计数器的。http的keepalive是为了复用一个tcp，避免多次握手。当保活计数器时间段内有收到数据，tcp就不会断开；如果没有收到数据，tcp断开也是应该的，因为占着资源，不发数据，还不如等你要发数据了重新建立一次连接来的好。</p>]]></content>
      
      
      <categories>
          
          <category> 转载 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql 在ubuntu和centos上的安装</title>
      <link href="//post/mysql-install.html"/>
      <url>//post/mysql-install.html</url>
      
        <content type="html"><![CDATA[<h1 id="mysql-在ubuntu和centos上的安装"><a href="#mysql-在ubuntu和centos上的安装" class="headerlink" title="mysql 在ubuntu和centos上的安装"></a>mysql 在ubuntu和centos上的安装</h1><h2 id="ubuntu"><a href="#ubuntu" class="headerlink" title="ubuntu"></a>ubuntu</h2><p>系统：Ubuntu16.04</p><pre class="line-numbers language-none"><code class="language-none">apt-get updateapt-get install mysql-server</code></pre><p>需要注意的是，在安装mysql 后是不可以使用navicat等远程工具进行连接的</p><p>默认安装后，3306端口只绑定给了localhost，所以外网是无法访问的</p><p>解决方法：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">vim /etc/mysql/mysql.conf.d/mysqld.cnf</code></pre><p>将bind-address   = 127.0.0.1注释掉</p><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/markdown/202203091514554.png" alt="image-20210721175850771"></p><p>重启即可</p><pre class="line-numbers language-none"><code class="language-none">systemctl restart mysql service mysql restart</code></pre><p> 接着授予权限：</p><h2 id="centos"><a href="#centos" class="headerlink" title="centos"></a>centos</h2><p>系统：centos7</p><p>下载mysql5.7的本地仓库文件</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">wget -i -c http://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm</code></pre><p>将仓库信息添加至yum</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum -y install mysql57-community-release-el7-10.noarch.rpm</code></pre><p>接着在通过yum进行安装</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum -y install mysql-community-server --nogpgcheck</code></pre><p>此时mysql会取代mariadb</p><p>启动mysql服务</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">systemctl start mysqldsystemctl status mysqld</code></pre><p>此时的登陆密码存放在文件里，查看密码，用该初始化密码登录</p><pre class="line-numbers language-none"><code class="language-none">grep "A temporary password is generated" /var/log/mysqld.log|awk '{print $11}'</code></pre><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/markdown/202203091514491.png" alt="image-20220309150733851"></p><p>使用命令登录数据库后，修改该默认密码，否则无法使用</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">ALTER USER 'root'@'localhost' IDENTIFIED BY '$Password';</code></pre><p>其中，新密码必须使用大写，小写，数字和特殊字符组成</p><p>开启远程登录</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">grant all privileges on *.* to 'root'@'%' identified by 'password' with grant option;flush privileges; </code></pre><p>其中%代表所有ip，password替换为数据库密码。</p><h2 id="centos一键部署脚本"><a href="#centos一键部署脚本" class="headerlink" title="centos一键部署脚本"></a>centos一键部署脚本</h2><p><strong><a href="https://github.com/HeJayce/linux-and-shell/blob/main/mysql/mysql_install.sh">Rate limit · GitHub</a>，初来乍到，有错请指教，默认密码为<code>Abc123!@#</code></strong></p>]]></content>
      
      
      <categories>
          
          <category> 部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在服务器部署jupyter notebook，实现服务器环境运算</title>
      <link href="//post/jupyter-notebook.html"/>
      <url>//post/jupyter-notebook.html</url>
      
        <content type="html"><![CDATA[<h1 id="在服务器部署jupyter-notebook，实现服务器环境运算"><a href="#在服务器部署jupyter-notebook，实现服务器环境运算" class="headerlink" title="在服务器部署jupyter notebook，实现服务器环境运算"></a>在服务器部署jupyter notebook，实现服务器环境运算</h1><blockquote><p>大学时期为了借用服务器环境，已踩坑无数，今天突然想起来，部署着玩玩，python初学者也可使用jupyter notebook，ipython对python初学者很友好，也很适合做深度学习，数据分析等</p></blockquote><p>能实现随时随地在浏览器上进行Python处理数据等程序</p><p>效果：</p><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/image-20220413234445593.png" alt="image-20220413234445593"></p><h2 id="简单说下jupyter-notebook"><a href="#简单说下jupyter-notebook" class="headerlink" title="简单说下jupyter notebook"></a>简单说下jupyter notebook</h2><p>Jupyter notebook是一种 Web 应用，能让用户将说明文本、数学方程、代码和可视化内容全部组合到一个易于共享的文档中。与常规的py文件不同的是，Jupyter notebook主要运行的是ipython，ipython是一个python的交互式shell，非常适合进行科学计算和交互可视化。</p><p>看下图就能明白区别</p><p>iPython(Jupyter notebook)</p><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/markdown/202202160100134.png" alt="image-20220216010041321"></p><p>Python：</p><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/image-20220413234657376.png" alt="image-20220413234657376"></p><h2 id="开始部署"><a href="#开始部署" class="headerlink" title="开始部署"></a>开始部署</h2><p>直接使用<code> pip install jupyter</code> 即可安装</p><p>但这里我们还是用anaconda，anaconda虽然很臃肿，但包含了许多的库，可以节省许多精力，<strong>即使不安装anaconda也是可以安装</strong></p><h3 id="anaconda安装"><a href="#anaconda安装" class="headerlink" title="anaconda安装"></a>anaconda安装</h3><p>在<a href="https://www.anaconda.com/">Anaconda官网</a>寻找适合linux的安装脚本，这里直接给出地址<a href="https://repo.anaconda.com/archive/Anaconda3-2021.11-Linux-x86_64.sh">https://repo.anaconda.com/archive/Anaconda3-2021.11-Linux-x86_64.sh</a></p><p>由于软件更新，地址可能出现失效，实际已官网提供为准。</p><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/markdown/202202160142772.png" alt="image-20220216014226572"></p><p>下载好脚本后，用scp<code>或</code>ftp<code>上传至服务器</code>，当然也可直接在服务器<code>wget</code><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/markdown/202202160141546.png" alt="image-20220216014144845"></p><p>运行安装脚本:</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">bash Anaconda3-2021.11-Linux-x86_64.sh</code></pre><p>这里的文件名以自己下载的为准</p><p>运行脚本后，为了方便基本可以全程回车和yes，但建议还是看每项是否都需要yes，一切根据自身情况判断</p><p>安装好后，需要配置环境变量，修改<code>/etc/profile</code>或者<code>/etc/bashrc</code>的配置信息来设置环境变量</p><p>在<code>/etc/profile</code> 中添加：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">export PATH=$PATH:/root/anaconda3/bin</code></pre><p>这里的路径为你安装anaconda的目录</p><p>保存退出，执行<code>source /etc/profile</code></p><p>输入python3 ，看看环境：</p><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/markdown/202202160147985.png" alt="image-20220216014727419"></p><p>如果是上图这样，则不成功，系统调用了原装的python3.6</p><p>执行python3.9，运行anaconda环境：</p><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/markdown/202202160149595.png" alt="image-20220216014906051"></p><p>多版本python的情况可以利用别名进行区分：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">alias python3=python3.9</code></pre><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/markdown/202202160152179.png" alt="image-20220216015210129"></p><p> 安装好anaconda和python环境后，需要对jupyter进行配置</p><p>进入python，执行以下命令</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">from notebook.auth import passwd passwd()</code></pre><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/markdown/202202160948965.png" alt="image-20220216094836772"></p><p>此时提示需要输入密码，设置一个进入jupyter notebook的密码，系统会输出一个sha1加密的字符串，这个要保存下来，后面要用</p><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/markdown/202202160950884.png" alt="image-20220216095052523"></p><p>在终端执行jupyter 配置文件生成命令，如果是root用户执行的，加上<code>加上</code>–allow-config``</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">jupyter notebook --generate-configjupyter notebook --generate-config --allow-config</code></pre><p>如果提示找不到命令，请进入<code>anaconda3/etc/jupyter/</code> 目录下执行</p><p>此时会生成一个配置文件jupyter_notebook_config.py ，接着用编辑器打开（命令执行后有目录位置的提示）</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">vim ~/.jupyter/jupyter_notebook_config.py</code></pre><p>在配置文件中添加以下参数：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"># 允许访问此服务器的 IP，星号表示任意 IPc.NotebookApp.ip = "*"# 运行时不打开本机浏览器c.NotebookAPp.open_browser = False# 之前生成的密码 hash 字串c.NotebookApp.password = 'sha1:781d82cc6080:e047e581703e4f0c6cd6ec4d037b244315aebe9c'# 使用的端口，记得在安全组中开放c.NotebookApp.port= 8000#指定后续程序的目录，创建好再启动c.NotebookApp.notebook_dir = "/root/jupyter_project"# 禁止使用终端c.NotebookApp.terminals_enabled = True</code></pre><p>其余注释的配置，感兴趣的可以自行查询效果，根据自己意愿进行配置</p><p>保存并退出</p><p>启动jupyter notebook</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">jupyter notebook --allow-root</code></pre><p>其中root用户才需要<code>--allow-root</code></p><p>此时系统会出现运行日志，如果报错可根据日志查询报错原因</p><p>如果成功运行，此时，用ip或域名加上刚才配置文件指定的ip，看看能不能访问到</p><p>如果成功进入，输入刚才你设置的密码即可</p><p>需要进行反向代理的，也可以配置nginx，这里不深入了</p><p>测试jupyter notebook</p><p>右上角new一个python3 ，此时会进入jupyter notebook编辑页面，尝试写一些代码，看看python和各类库是否正常</p><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/markdown/202202161006258.png" alt="image-20220216100627203"></p><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/markdown/202202161021586.png" alt="image-20220216102155441"></p>]]></content>
      
      
      <categories>
          
          <category> 部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
            <tag> python </tag>
            
            <tag> jupyter notebook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>alias的详解与运维</title>
      <link href="//post/alias.html"/>
      <url>//post/alias.html</url>
      
        <content type="html"><![CDATA[<h1 id="alias的详解"><a href="#alias的详解" class="headerlink" title="alias的详解"></a>alias的详解</h1><p>alias 可以为命令指定别名，所谓别名可以省去一长串命令的麻烦</p><h2 id="查看别名"><a href="#查看别名" class="headerlink" title="查看别名"></a>查看别名</h2><p>直接使用命令<code>alias</code>可以查看所有的别名，如果想看某一命令，在alias后跟命令即可</p><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/markdown/202202141523138.png" alt="image-20220214152355809"></p><h2 id="创建别名"><a href="#创建别名" class="headerlink" title="创建别名"></a>创建别名</h2><p>例如：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">alias newcmd='cmd'alias install='sudo apt-getinstall'</code></pre><p>上述方式一旦关闭终端，设置的别名就失效了</p><p>可以将命令放入 <del>/.bashrc 中，当每个进程生成时，都要执行`</del>/.bashrc`中的命令</p><h2 id="删除别名"><a href="#删除别名" class="headerlink" title="删除别名"></a>删除别名</h2><p><code>unalias</code> 命令可以将之前的别名删除</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">unalias vi</code></pre><p>使用<code>-a</code>参数可以清除所有的别名</p><h2 id="不使用别名"><a href="#不使用别名" class="headerlink" title="不使用别名"></a>不使用别名</h2><p>当我们为命令加上日常参数后，但有时需要使用原始的命令时，有三种方法可以调用原始命令</p><ol><li>使用命令的绝对路径</li><li>切换命令所在目录，使用<code>./cmd</code></li><li>在命令前使用反斜线<code>\</code></li></ol><h2 id="别名永久生效"><a href="#别名永久生效" class="headerlink" title="别名永久生效"></a>别名永久生效</h2><p>我们通过 alias 命令设置的别名，仅限于在当前的 Shell 中使用，如果系统重启了，那么新设置的别名就失效了。</p><p>如果想让别名永久有效的话，就需要把所有的别名设置方案加入到（$HOME）目录下的 .alias 文件中（如果系统中没有这个文件，你可以创建一个），然后在 .bashrc 文件中增加这样一段代码：</p><pre class="line-numbers language-none"><code class="language-none"># Aliasesif [ -f ~/.alias ]; then  . ~/.aliasfi</code></pre><p>.alias文件：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">vim .alias######alias tf='tail -f'  #动态查看文件变化</code></pre><p>执行<code>source ~/.bashrc</code></p><h2 id="安全删除"><a href="#安全删除" class="headerlink" title="安全删除"></a>安全删除</h2><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">alias rm='saferm(){ /bin/cp -a $@ ~/backup;rm $@; };saferm $@'</code></pre>]]></content>
      
      
      <categories>
          
          <category> 文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> 服务器 </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins安装</title>
      <link href="//post/jenkins-install.html"/>
      <url>//post/jenkins-install.html</url>
      
        <content type="html"><![CDATA[<h1 id="Jenkins-安装"><a href="#Jenkins-安装" class="headerlink" title="Jenkins 安装"></a>Jenkins 安装</h1><h2 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h2><h3 id="下载jdk"><a href="#下载jdk" class="headerlink" title="下载jdk"></a>下载jdk</h3><p>进入<a href="https://www.oracle.com/java/technologies/downloads/#java8">JDK下载官网</a> 下载JDK</p><p>这里选择下载131版本，如果版本较新也没问题，<a href="https://www.oracle.com/technetwork/java/javase/downloads/java-archive-javase8-2177648.html">老版本下载链接</a> </p><p>在服务器下创建安装的文件夹，在<code>usr</code>文件夹下创建java文件夹</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">mkdir -p /usr/java</code></pre><p>将下载好的JDK解压至该文件夹</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">tar -zvxf jdk-8u131-linux-x64.tar.gz -C /usr/java</code></pre><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p>与windows类似，Linux下配置环境变量只需修改配置文件即可</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">vim /etc/profile</code></pre><p>在文件下添加：</p><pre class="line-numbers language-none"><code class="language-none">#javaexport JAVA_HOME=/usr/java/jdk1.8.0_131export PATH=$JAVA_HOME/bin:$PATHexport CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</code></pre><p>执行<code>source /etc/profile</code>生效</p><p>执行<code>java -version</code> 如果返回版本号则安装成功</p><h2 id="安装Jenkins"><a href="#安装Jenkins" class="headerlink" title="安装Jenkins"></a>安装Jenkins</h2><h3 id="yum源导入"><a href="#yum源导入" class="headerlink" title="yum源导入"></a>yum源导入</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#添加Yum源wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo</code></pre><p>如果该步骤无法下载，报错ERROR: cannot verify pkg.jenkins.io’s certificate, issued by ‘/C=US/O=Let’s Encrypt/CN=R3’:</p><p>这是因为wget命令下载不安全的https 域名下的内容，此时需要安装ca-certificates</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum install -y ca-certificates</code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#导入密钥rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key</code></pre><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum install -y jenkins</code></pre><p>如果缺少daemonize，则同样yum安装daemonize</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>访问IP+8080 端口即可访问Jenkins界面</p><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/markdown/202203081427668.png" alt="image-20220308142711995"></p><p>如果不能访问请检查防火墙，添加8080端口</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">firewall-cmd --add-port=8080/tcp --permanentfirewall-cmd --reload</code></pre><p>第一次打开需要解锁Jenkins，查看web端提示的密码文件</p><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/markdown/202203081429423.png" alt="image-20220308142939118"></p><p>将此行密码复制进去即可</p><p>接着选择安装推荐的插件</p><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/markdown/202203081430531.png" alt="image-20220308143042461"></p><p>等待即可</p><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/markdown/202203081431177.png" alt="image-20220308143106111"></p><p>创建管理员</p><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/markdown/202203081445918.png" alt="image-20220308144503922"></p><p>URL可自愿修改</p><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/markdown/202203081458412.png" alt="image-20220308144542253"></p>]]></content>
      
      
      <categories>
          
          <category> 部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> Jenkins </tag>
            
            <tag> 阿里云 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在服务器部署Jenkins同步github代码</title>
      <link href="//post/jenkins-github.html"/>
      <url>//post/jenkins-github.html</url>
      
        <content type="html"><![CDATA[<h1 id="在服务器部署Jenkins同步github代码"><a href="#在服务器部署Jenkins同步github代码" class="headerlink" title="在服务器部署Jenkins同步github代码"></a>在服务器部署Jenkins同步github代码</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>使用hexo在github托管个人网站后，如果想要在自己的服务器上部署并且代码与github一致，可以使用Jenkins来同步</p><p>Jenkins可以监控github的动作，设置当代码push后，Jenkins监控到这一动作，自动拉取最新的代码</p><h2 id="Jenkins安装"><a href="#Jenkins安装" class="headerlink" title="Jenkins安装"></a><a href="">Jenkins安装</a></h2><h2 id="获取hook"><a href="#获取hook" class="headerlink" title="获取hook"></a>获取hook</h2><p>在安装Jenkins时，已经默认安装了github的插件，首先需要配置全局的github，在管理Jenkins中点击Configure System，进入设置。这里的入口与其他博客可能会有不同，请根据自己安装的Jenkins版本自行判断</p><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/markdown/202202051315671.png" alt="image-20220205131509975"></p><p>找到github的配置块</p><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/markdown/202202051315820.png" alt="image-20220205131557625"></p><p>Jenkins在关联Github前，需要准备好Hook，这个Hook需要点击高级，找到为 Github 指定另外一个 Hook URL，勾选这个CheckBox（一时想不起来中文叫啥了)，获取到这个URL</p><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/markdown/202202051323334.png" alt="image-20220205132303844"></p><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/markdown/202202051323137.png" alt="image-20220205132229972"></p><h2 id="github添加hook"><a href="#github添加hook" class="headerlink" title="github添加hook"></a>github添加hook</h2><p>到github，选择需要同步的项目，进入设置界面，点击Webhooks</p><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/markdown/202202051326764.png" alt="image-20220205132622973"></p><p>新建一个webhooks（右上角Add Webhooks）</p><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/markdown/202202051328277.png" alt="image-20220205132829053"></p><p>这里的Payload URL填写刚才在Jenkins中的URL<code>http://ip:port/github-webhook/</code></p><p>下面选择第三个</p><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/markdown/202202051329104.png" alt="image-20220205132951899"></p><p>在下面勾选Pushes<img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/markdown/202202051330792.png" alt="image-20220205133026618"></p><p>最后点击添加即可</p><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/markdown/202202051331682.png" alt="image-20220205133125556"></p><h2 id="生成sercret-text"><a href="#生成sercret-text" class="headerlink" title="生成sercret text"></a>生成sercret text</h2><p>添加好后，先别急关掉，此时还需要生成一个sercret text，进入github的设置，进入Developer setting，选择Personal Access Token 点击 Generate new token</p><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/markdown/202202051339773.png" alt="image-20220205133943847"></p><p>选择这两个</p><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/markdown/202202051340362.png" alt="image-20220205134047182"></p><p>生成即可</p><h2 id="Jenkins配置github"><a href="#Jenkins配置github" class="headerlink" title="Jenkins配置github"></a>Jenkins配置github</h2><p>返回Jenkins，这里的名称可以随便写</p><p>API URL保持默认<a href="https://api.github.com就行/">https://api.github.com就行</a></p><p>这里需要添加凭据</p><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/markdown/202202051316492.png" alt="image-20220205131650075"></p><p>点击高亮的Jenkins进入添加凭据界面</p><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/markdown/202202051342576.png" alt="image-20220205134249370"></p><p>类型选择sercret text，把刚才生成的sercret text添加到Secret中，id可不写，描述可简单描述即可</p><p>填完后点击下面添加，此时凭据界面就会有刚才添加的sercret text了</p><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/markdown/202202051345485.png" alt="image-20220205134501227"></p><p>最后保存</p><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>回到主界面，新建一个项目，<img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/markdown/202202051345969.png" alt="image-20220205134552671"></p><p>名称自己填，项目类型选择第一个Freestyle project<img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/markdown/202202051346408.png" alt="image-20220205134639318"></p><p>点击确定添加</p><h2 id="配置github仓库"><a href="#配置github仓库" class="headerlink" title="配置github仓库"></a>配置github仓库</h2><p>进入配置界面，选择Github项目，填写仓库地址</p><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/markdown/202202051347122.png" alt="image-20220205134743946"></p><p>源码管理使用Git</p><p>输入仓库的Git地址，例如<code>git@github.com:HeJayce/HeJayce.github.io.git</code></p><p>此时需要添加git的私钥，如果服务器已经配置好，可以直接在<code>.ssh/</code>文件夹找到，复制私钥，点击添加凭据，与刚才类似，但这里类型需要选择SSH Username with private key，其他可以适当写写，但重要的是在下面把私钥复制进去</p><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/markdown/202202051352246.png" alt="image-20220205135210530"></p><p>分支根据自己情况填写，源码库浏览器选择githubweb，URL填写仓库地址</p><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/markdown/202202051403853.png" alt="image-20220205135326208"></p><p>其他安装下图选择即可</p><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/markdown/202202051354450.png" alt="image-20220205135438447"></p><p>最后点击保存即可，此时返回项目界面，点击立即构建，Jenkins就会把仓库代码clone下来，当出现绿色对勾即表示正常，前面的叉都是踩的坑，搞到4点多，终于搞定了</p><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/markdown/202202051356625.png" alt="image-20220205135614058"></p><p>由于我的项目是静态网页，只需要在Nginx中配置下路径即可</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx">server {        listen       80;        server_name  填你的公网ip;        location / {            root /var/lib/jenkins/workspace/jayce_blog;            index index.html;        }    }</code></pre>]]></content>
      
      
      <categories>
          
          <category> 部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> Jenkins </tag>
            
            <tag> github </tag>
            
            <tag> 阿里云 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用typora+阿里云oss打造博客写作平台</title>
      <link href="//post/prometheus-grafana.html"/>
      <url>//post/prometheus-grafana.html</url>
      
        <content type="html"><![CDATA[<h1 id="使用grafana可视化仪表监控服务器数据和nginx吞吐"><a href="#使用grafana可视化仪表监控服务器数据和nginx吞吐" class="headerlink" title="使用grafana可视化仪表监控服务器数据和nginx吞吐"></a>使用grafana可视化仪表监控服务器数据和nginx吞吐</h1><p>Prometheus 服务端负责数据的收集，然后将数据推送至grafana进行前台展示，而如何用Prometheus 采集到服务器和Nginx的数据呢，这里就需要再引入两个工具，服务器数据采用NodeExporter进行采集，Nginx数据通过nginx-module-vts插件进行采集。</p><p>为了服务器环境的整洁，此次监控都将采用docker容器，docker即简单又不影响服务器环境，越来越受欢迎。</p><p>需要在docker上安装的有<br>prometheus    拉取并存储数据 ，node-exporter 收集内核公开的硬件和操作系统指标 grafana  将取出的数据展示可视化<br>具体流程为 node-exporter对服务器进行取数，nginx-module-vts对nginx进行取数，prometheus进行数据统一管理，由prometheus 推送至grafana进行数据展示<br>效果图：</p><h3 id="监控服务器"><a href="#监控服务器" class="headerlink" title="监控服务器"></a>监控服务器</h3><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/image-20220404145449706.png" alt="image-20220404145449706"></p><h3 id="监控nginx"><a href="#监控nginx" class="headerlink" title="监控nginx"></a>监控nginx</h3><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/image-20220404145734567.png" alt="image-20220404145734567"></p><h2 id="安装prometheus"><a href="#安装prometheus" class="headerlink" title="安装prometheus"></a>安装prometheus</h2><p>直接拉取prometheus的镜像</p><pre class="line-numbers language-none"><code class="language-none">docker pull prom/prometheus</code></pre><p>运行prometheus</p><pre class="line-numbers language-none"><code class="language-none">docker run -d --name prometheus prom/prometheus</code></pre><p>然后我们将prometheus的配置文件复制到本地目录，方便修改</p><pre class="line-numbers language-none"><code class="language-none">docker cp -a prometheus:/etc/prometheus/ $PWD/prometheus</code></pre><p>然后停止prometheus，重新创建并使用配置文件运行</p><pre class="line-numbers language-none"><code class="language-none">docker stop prometheusdocker rm  prometheus</code></pre><pre class="line-numbers language-none"><code class="language-none">docker run -d --name prometheus -p 9090:9090 -v $PWD/prometheus:/etc/prometheus prom/prometheus</code></pre><p>注意9090端口在安全组和防火墙开通</p><p>然后访问<code>ip:9090</code>看看是否成功</p><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/markdown/202204081058933.png" alt="image-20220408105846841"></p><p>这里我用域名代替ip，以实际网络环境为准</p><p>查看docker运行的服务：</p><pre class="line-numbers language-none"><code class="language-none">docker ps -a</code></pre><p>安装node-exporter</p><pre class="line-numbers language-none"><code class="language-none">docker pull prom/node-exporter</code></pre><p> 运行</p><pre class="line-numbers language-none"><code class="language-none">docker run -d --name node-exporter -p 9100:9100 -v "/proc:/host/proc:ro" -v "/sys:/host/sys:ro" -v "/:/rootfs:ro" --net="host" prom/node-exporter</code></pre><p>修改prometheus配置文件，让node-exporter数据连接prometheus，</p><pre class="line-numbers language-none"><code class="language-none">vim prometheus/prometheus.yml</code></pre><pre class="line-numbers language-none"><code class="language-none">scrape_configs:  - job_name: "prometheus"    static_configs:      - targets: ['172.26.134.10:9090']        labels:          instance: prometheus  - job_name: 'centos_1'    static_configs:    - targets: ['172.26.134.10:9100']      labels:         instance: centos_1</code></pre><p>targets：选择填prometheus的ip和端口，建议选择localhost或内网地址。job_name：起个名字</p><p>保存退出，重启prometheus</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">docker restart prometheus</code></pre><p>打开浏览器：</p><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/image-20220413235210346.png" alt="image-20220413235210346"></p><p>安装grafana</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">docker pull grafana/grafana</code></pre><p>创建grafana目录</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">mkdir grafana</code></pre><p>启动镜像</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker run -d --name=grafana -p 3000:3000 -v $PWD/grafana:/var/lib/grafana grafana/grafana</code></pre><p>打开浏览器</p><h2 id="监控nginx配置"><a href="#监控nginx配置" class="headerlink" title="监控nginx配置"></a>监控nginx配置</h2><p>监控nginx需要使用nginx-module-vts插件，而nginx-module-vts插件的添加又需要重新编译nginx，此方法适用于编译安装而非yum安装</p><p>安装nginx-module-vts</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">git clone git://github.com/vozlt/nginx-module-vts.git</code></pre><p>这里会在当前目录下将nginx-module-vts克隆下来，没有git请自行百度安装</p><p>进入nginx原始的目录，准备编译</p><p>在编译前，添加参数<code>--add-module=/path/to/nginx-module-vts</code></p><pre class="line-numbers language-none"><code class="language-none">--prefix=/usr/local/nginx --with-http_gzip_static_module --with-http_stub_status_module --with-http_ssl_module --with-pcre --with-file-aio --with-http_realip_module --add-module=/usr/local/nginx-module-vts</code></pre><pre class="line-numbers language-none"><code class="language-none">make</code></pre><p>编译完成后，将编译好的nginx可执行文件复制到原来的nginx启动目录sbin下</p><p>执行nginx -V，看看有没有nginx-module-vts参数</p><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/markdown/202204021355092.png" alt="image-20220402135521016"></p><p>此时打开nginx配置文件，添加监控接口</p><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/markdown/202204021357475.png" alt="image-20220402135729259"></p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx">location /status {        vhost_traffic_status_display;        vhost_traffic_status_display_format html;}</code></pre><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/markdown/202204021358160.png" alt="image-20220402135813113"></p><p>修改prometheus配置文件，添加nginx模块</p><pre class="line-numbers language-none"><code class="language-none">- job_name: 'nginx'    static_configs:    - targets: ['172.26.134.10:9013']      labels:         instance: nginx</code></pre><p>保存并重启</p><p>此时打开公网/内网地址，<code>/status</code>下即可显示nginx数据了</p><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/markdown/202204021412387.png" alt="image-20220402141230288"></p><p><code>/status/format/prometheus</code> :</p><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/markdown/202204021414243.png" alt="image-20220402141427152"></p><p>用nginx将上面的地址转换为prometheus的地址：</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx">server {        listen       9013 ;        server_name  172.26.134.10;location /status {        vhost_traffic_status_display;        vhost_traffic_status_display_format html;        }location /metrics{        proxy_pass  http://172.26.134.10:9013/status/format/prometheus;}}</code></pre><p>prometheus配置文件添加，重启prometheus</p><pre class="line-numbers language-none"><code class="language-none">- job_name: 'nginx'   static_configs:   - targets: ['172.26.134.10:9013']     labels:        instance: nginx</code></pre><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">docker restart prometheus</code></pre><p>此时访问IP:9013/metrics ，就可以变成prometheus需要的类型了</p><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/markdown/202204021417501.png" alt="image-20220402141739403"></p><h2 id="配置grafana"><a href="#配置grafana" class="headerlink" title="配置grafana"></a>配置grafana</h2><p>有了数据源，接下来就是配置可视化仪表了</p><p>打开grafana登录页面，默认用户名密码都是admin</p><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/markdown/202204081036547.png" alt="image-20220408103615852"></p><p>登录后会自动提示修改密码，也可以跳过</p><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/markdown/202204081036130.png" alt="image-20220408103651978"></p><blockquote><p>忘记密码操作：</p><p><code>find / -name "grafana.db"</code></p><p><code>sqlite3  grafana.db</code></p><p><code>.tables</code> **</p><p> <code>select * from user;</code> **</p><p><code>update user set password = '59acf18b94d7eb0694c61e60ce44c110c7a683ac6a8f09580d626f90f4a242000746579358d77dd9e570e83fa24faa88a8a6', salt = 'F3FAxVm33R' where login = 'admin';</code></p><p><code>.exit</code></p><p>重启grafana</p><p>密码和用户名都重置为admin</p></blockquote><p>修改即可</p><h4 id="配置数据源"><a href="#配置数据源" class="headerlink" title="配置数据源"></a>配置数据源</h4><p>进入主界面找到下图所示data sources</p><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/markdown/202204081038259.png" alt="image-20220408103844156"></p><p>点击右边蓝色 add data source</p><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/markdown/202204081039713.png" alt="image-20220408103949639"></p><p>选择第一个Prometheus源</p><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/markdown/202204081040727.png" alt="image-20220408104007625"></p><p>填入<code>ip:9090</code>，其他可以不用管，点击最后的保存并测试</p><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/markdown/202204081044265.png" alt="image-20220408104436874"></p><p>正确即出现下图标识：</p><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/markdown/202204081047438.png" alt="image-20220408104713340"></p><h4 id="配置可视化"><a href="#配置可视化" class="headerlink" title="配置可视化"></a>配置可视化</h4><p>导入一个模板，模板可以在此网站挑选<a href="https://grafana.com/grafana/dashboards/">Dashboards | Grafana Labs</a></p><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/markdown/202204081048748.png" alt="image-20220408104801670"></p><p>选择好后，将模板代号填入即可</p><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/markdown/202204081055144.png" alt="image-20220408105512736"></p><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/markdown/202204081055551.png" alt="image-20220408105531459"></p><p>导入成功后，配置好的模板会自动识别数据源，将数据进行展示，如果个别模块没有数据，可以手动配置数据</p><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/markdown/202204081056466.png" alt="image-20220408105653310"></p><p>可在edit模块，选择数据源以及需要展示的数据</p><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/markdown/202204081057411.png" alt="image-20220408105740337"></p><p>nginx同理，但组件需要手动配置数据</p>]]></content>
      
      
      <categories>
          
          <category> 部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Prometheus </tag>
            
            <tag> grafana </tag>
            
            <tag> Linux </tag>
            
            <tag> 可视化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用typora+阿里云oss打造博客写作平台</title>
      <link href="//post/typora-oss.html"/>
      <url>//post/typora-oss.html</url>
      
        <content type="html"><![CDATA[<h1 id="使用typora-阿里云oss-打造博客写作平台"><a href="#使用typora-阿里云oss-打造博客写作平台" class="headerlink" title="使用typora+阿里云oss 打造博客写作平台"></a>使用typora+阿里云oss 打造博客写作平台</h1><h2 id="背景简介"><a href="#背景简介" class="headerlink" title="背景简介"></a>背景简介</h2><p>我使用typora+markdown作为日常笔记的重要工具，但markdown最大的痛点是图片需要单独存放，并不能像word那样保存为一个文件，而遇到分享文件，或者整片复制的情况时，就会出现不能正常显示图片的问题。</p><h2 id="方案介绍"><a href="#方案介绍" class="headerlink" title="方案介绍"></a>方案介绍</h2><p>利用阿里云oss，将涉及到的图片存放在云端，图片的url将是公网地址，不再局限于本机。使用onedrive可以对md文件进行同步，onedrive支持windows，ios，macos，Android同步，同步速度中规中矩。</p><h2 id="阿里云oss"><a href="#阿里云oss" class="headerlink" title="阿里云oss"></a>阿里云oss</h2><p>对象存储oss是阿里云提供的一种云端存储方案，它与网盘最大的区别是，它可以使用url进行查看，而且操作方便，价格实惠</p><p>阿里云oss价格参考</p><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/markdown/202108191438597.png" alt="image-20210819143824267"></p><p>选择最便宜40G，存放图片完全够用。</p><p>类似的存储在不同平台也有很多，只是名字不一样而已，核心功能都一样</p><p>例如腾讯云cos</p><h2 id="操作流程"><a href="#操作流程" class="headerlink" title="操作流程"></a>操作流程</h2><h3 id="oss准备"><a href="#oss准备" class="headerlink" title="oss准备"></a>oss准备</h3><ol><li><p>到<a href="https://www.aliyun.com/product/oss/">阿里云oss产品官网</a>购买oss服务，根据自身需求购买相应的内存及性能</p></li><li><p>创建Bucket，Bucket相当于仓库，是你将来要存放数据的地方</p><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/markdown/202108191445966.png" alt="image-20210819144518089"></p></li></ol><p>创建Bucket </p><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/markdown/202202022133051.png" alt="image-20210819144620800"></p><p>我使用的图床软件是PicGo， 下载安装这里不多赘述，现在需要将oss的信息添加到PicGo 中，废话不多，直接上配置，打开配置文件，在阿里云的配置区域里，填写自己所买的accessKeyId和accessKeySecret，以及创建的bucket。</p><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/markdown/202202022133067.png" alt="image-20220202210957291"></p><p>记得在设置下面勾选阿里云oss</p><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/markdown/202202022111401.png" alt="image-20220202211152739"></p><pre class="line-numbers language-none"><code class="language-none">"aliyun": {    "accessKeyId": "*******",    "accessKeySecret": "********",    "area": "oss-cn-hangzhou",    "bucket": "jaycehe",    "customUrl": "",    "options": "",    "path": "markdown/"  },</code></pre><p>其次是<code>typora</code>软件，虽然现在收费了，但支持多平台并且真的好用的编辑软件也找不出来了</p><p>想要配置图床，先在偏好设置-图像</p><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/markdown/202202022104031.png" alt="image-20220202210411391"></p><p>把PicGo的路径添加进去，点击验证图片上传选项验证oss是否能正常上传，一般上传正常就会返回成功值</p><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/markdown/202202022114037.png" alt="image-20220202211414361"></p><p>但一般会大大小小出现一些问题，随后会更新问题概述及解决方法，如果出现上传失败，请先检查oss配置，多半问题都出在PicGo的配置和OSS配置上，结合日志和阿里云给出的报错提示 <a href="https://help.aliyun.com/document_detail/42777.html">OSS权限相关常见错误的排查方法</a> 自己排查不出来也可以联系我。</p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>如果想用oss代替本地图片，首先正常添加图片至markdown文件后，右键即可弹出上传图片选项，点击即可替换图片的本地路径为oss在线链接</p><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/markdown/202202022122264.png" alt="image-20220202212256962"></p>]]></content>
      
      
      <categories>
          
          <category> 部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 阿里云 </tag>
            
            <tag> Markdown </tag>
            
            <tag> OSS </tag>
            
            <tag> typora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云等国内服务器github加速</title>
      <link href="//post/ecs-github.html"/>
      <url>//post/ecs-github.html</url>
      
        <content type="html"><![CDATA[<h1 id="阿里云等国内服务器github加速"><a href="#阿里云等国内服务器github加速" class="headerlink" title="阿里云等国内服务器github加速"></a>阿里云等国内服务器github加速</h1><p>解决在阿里云等国内的服务器上从github上拉代码，但网络不通的情况。</p><p>准备一个v2ray节点</p><h3 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h3><h4 id="安装v2ray"><a href="#安装v2ray" class="headerlink" title="安装v2ray"></a>安装v2ray</h4><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">wget https://raw.githubusercontent.com/v2fly/fhs-install-v2ray/master/install-release.sh  --user-agent="Mozilla/5.0"</code></pre><p>如果下载不下来，请通过ftp等方式上传</p><h4 id="运行下载的脚本"><a href="#运行下载的脚本" class="headerlink" title="运行下载的脚本"></a>运行下载的脚本</h4><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">bash install-release.sh</code></pre><p>这个过程时间会有点长，但实测阿里云网络可以安装</p><h4 id="运行v2ray"><a href="#运行v2ray" class="headerlink" title="运行v2ray"></a>运行v2ray</h4><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">systemctl start v2ray</code></pre><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/markdown/202201292331756.png" alt="image-20220129233139100"></p><h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><p>在你的Windows 等v2ray客户端下，将配置文件config.json的内容复制到<code>/usr/local/etc/v2ray/config.json</code>下</p><p>   方法：</p><p>   <img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/markdown/202201292333040.png" alt="image-20220129233337800"></p><h4 id="重启v2ray"><a href="#重启v2ray" class="headerlink" title="重启v2ray"></a>重启v2ray</h4><h4 id="使用下命名可测试节点"><a href="#使用下命名可测试节点" class="headerlink" title="使用下命名可测试节点"></a>使用下命名可测试节点</h4><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">/usr/local/bin/v2ray -test -config /usr/local/etc/v2ray/config.json</code></pre><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/markdown/202201292335792.png" alt="image-20220129233516568"></p><p>检查端口是否通畅</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">lsof -i:10809</code></pre><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/markdown/202201292336185.png" alt="image-20220129233619810"></p><p><code>lsof</code>没有命令的可yum install lsof</p><h4 id="添加github代理"><a href="#添加github代理" class="headerlink" title="添加github代理"></a>添加github代理</h4>   <pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">git config --global http.proxy http://127.0.0.1:10809git config --global https.proxy http://127.0.0.1:10809</code></pre><p>此时再克隆代码速度飞快</p><p><img src="https://jaycehe.oss-cn-hangzhou.aliyuncs.com/markdown/202201292339343.png" alt="image-20220129233925182"></p>]]></content>
      
      
      <categories>
          
          <category> 部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> 服务器 </tag>
            
            <tag> linux </tag>
            
            <tag> github </tag>
            
            <tag> 阿里云 </tag>
            
            <tag> v2ray </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
